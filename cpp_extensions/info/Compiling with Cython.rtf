{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .SFNS-Bold;\f1\fnil\fcharset0 .SFNS-Regular;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;\f4\fnil\fcharset0 .SFNS-Heavy;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue14;}
{\*\expandedcolortbl;;\cssrgb\c6700\c6700\c6700;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20880\viewh16920\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f0\b\fs30 \cf2 Step-by-Step Guide to Setting Up and Compiling a Cython Project with C++ Integration\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 Summary
\f1\b0\fs28 \cf2 \
\
\pard\tqr\tx260\tx420\li420\fi-420\sl324\slmult1\partightenfactor0

\f2 \cf2 	1.	
\f0\b Project Structure:
\f1\b0  Organize files in 
\f3 cpp_sources
\f1  for C++ code, 
\f3 cython_modules
\f1  for Cython code, and set up 
\f3 setup.py
\f1 .\

\f2 	2.	
\f0\b C++ Source Files:
\f1\b0  Declare functions in a header file and implement them in a 
\f3 .cpp
\f1  file.\

\f2 	3.	
\f0\b Cython File:
\f1\b0  Interface with C++ code using a 
\f3 .pyx
\f1  file and include the C++ header.\

\f2 	4.	
\f0\b Setup File:
\f1\b0  Use 
\f3 setuptools
\f1  and 
\f3 Cython.Build
\f1  to configure the build process in 
\f3 setup.py
\f1 .\

\f2 	5.	
\f0\b Build the Project:
\f1\b0  Compile the Cython code using the 
\f3 setup.py
\f1  script.\

\f2 	6.	
\f0\b Testing:
\f1\b0  Verify the compiled Cython functions using a test script.\

\f2 	7.	
\f0\b Running the Test:
\f1\b0  Execute the test script to ensure everything works correctly.\
\

\f0\b\fs30 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f4\fs26 \cf2 1. Project Structure
\f1\b0\fs28 \
\
Organize your project directory with the following structure:\
\
project_root/\
\uc0\u9500 \u9472 \u9472  cpp_extensions/\
\uc0\u9474    \u9500 \u9472 \u9472  cpp_sources/\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  your_cpp_file.cpp\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  your_cpp_header.h\
\uc0\u9474    \u9500 \u9472 \u9472  cython_modules/\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  your_cython_file.pyx\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  test_your_cython_file.py\
\uc0\u9474    \u9500 \u9472 \u9472  __init__.py\
\uc0\u9500 \u9472 \u9472  setup.py\
\

\f4\b\fs26 2. C++ Source Files
\f1\b0\fs28 \
\
Create the C++ source and header files in 
\f3 \cf2 cpp_sources/
\f1 \cf2 .\
\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\partightenfactor0
\cf2 	\'95	
\f0\b your_cpp_header.h:
\f1\b0  Declare all the functions you plan to use in Cython.\
	\'95	
\f0\b your_cpp_file.cpp:
\f1\b0  Implement all the declared functions.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 \

\f4\b\fs26 3. Cython File
\f1\b0\fs28 \
\
Create a 
\f3 \cf2 .pyx
\f1 \cf2  file in the 
\f3 \cf2 cython_modules
\f1 \cf2  directory.\
\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\partightenfactor0
\cf2 	\'95	
\f0\b your_cython_file.pyx:
\f1\b0  This file will contain the Cython code that interfaces with the C++ code. It should include the C++ header file.\
\pard\tqr\tx500\tx660\li660\fi-660\sl324\slmult1\partightenfactor0
\cf2 	\'95	Use the 
\f3 cdef extern from
\f1  syntax to include your C++ header file, specifying the relative path.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0
\cf2 \

\f4\b\fs26 4. Setup File
\f1\b0\fs28 \
\
Create a 
\f3 \cf2 setup.py
\f1 \cf2  file at the root of your project to handle the build configuration.\
\
from setuptools import setup, Extension\
from Cython.Build import cythonize\
import numpy as np\
\
extensions = [\
    Extension(\
        name="cpp_extensions.cython_modules.your_cython_file",\
        sources=[\
            "cpp_extensions/cython_modules/your_cython_file.pyx",\
            "cpp_extensions/cpp_sources/your_cpp_file.cpp"\
        ],\
        include_dirs=[np.get_include(), "cpp_extensions/cpp_sources"],\
        language="c++"\
    )\
]\
\
setup(\
    name="your_project_name",\
    ext_modules=cythonize(extensions),\
    include_dirs=[np.get_include()]\
)\
\

\f4\b\fs26 5. Build the Project
\f1\b0\fs28 \
\
Run the setup script to compile the Cython code and build the extension module.\
\
python setup.py build_ext --inplace\
\
\

\f4\b\fs26 6. Testing
\f1\b0\fs28 \
\
Create a test script in the 
\f3 \cf2 cython_modules
\f1 \cf2  directory to verify that the Cython functions work correctly.\
\
\pard\tqr\tx100\tx260\li260\fi-260\sl324\slmult1\partightenfactor0
\cf2 	\'95	
\f0\b test_your_cython_file.py:
\f1\b0  Import and test the functions from your compiled Cython module.\
\
python cpp_extensions/cython_modules/test_your_cython_file.py\
\
\
}